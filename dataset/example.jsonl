{"id": "xmlinputfactory", "rule": "rules:\n- id: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n  languages:\n  - java\n  message: '\n\n    XMLInputFactory instantiated without disabling entity processing via setProperty\n    functions.\n\n    '\n  patterns:\n  - pattern-not-inside: \"$RETURNTYPE $METHOD(...) {\\n  ...\\n  $XMLFACTORY.setProperty(\\\"\\\n      javax.xml.stream.isSupportingExternalEntities\\\", false);\\n  ...\\n}\\n\"\n  - pattern-not-inside: '$XMLFACTORY = $W.newInstance(...);\n\n      ...\n\n      $XMLFACTORY.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n\n      '\n  - pattern-either:\n    - pattern: $XMLFACTORY = $W.newFactory(...);\n    - pattern: $XMLFACTORY = new XMLInputFactory(...);\n    - pattern: $XMLFACTORY = SAXParserFactory.newInstance(...);\n    - pattern: $XMLFACTORY = DocumentBuilderFactory.newInstance(...);\n  severity: WARNING\n", "failed_tests": ["package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/vuln\")\n    public String XMLInputFactoryVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}"], "failed_type": "fp", "testsuite_a": "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/xmlReader/vuln\")\n    public String xmlReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));  // parse xml\n            return \"xmlReader xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/xmlReader/sec\", method = RequestMethod.POST)\n    public String xmlReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));  // parse xml\n\n            // fix code start\n            xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            //fix code end\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"xmlReader xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/SAXBuilder/vuln\", method = RequestMethod.POST)\n    public String SAXBuilderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXBuilder builder = new SAXBuilder();\n            // org.jdom2.Document document\n            builder.build(new InputSource(new StringReader(body)));  // cause xxe\n            return \"SAXBuilder xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/SAXBuilder/sec\", method = RequestMethod.POST)\n    public String SAXBuilderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            SAXBuilder builder = new SAXBuilder();\n            builder.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            builder.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            builder.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            // org.jdom2.Document document\n            builder.build(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"SAXBuilder xxe security code\";\n    }\n\n    @RequestMapping(value = \"/SAXReader/vuln\", method = RequestMethod.POST)\n    public String SAXReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXReader reader = new SAXReader();\n            // org.dom4j.Document document\n            reader.read(new InputSource(new StringReader(body))); // cause xxe\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"SAXReader xxe vuln code\";\n    }\n\n    @RequestMapping(value = \"/SAXReader/sec\", method = RequestMethod.POST)\n    public String SAXReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            SAXReader reader = new SAXReader();\n            reader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            // org.dom4j.Document document\n            reader.read(new InputSource(new StringReader(body)));\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXReader xxe security code\";\n    }\n\n    @RequestMapping(value = \"/SAXParser/vuln\", method = RequestMethod.POST)\n    public String SAXParserVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n\n            return \"SAXParser xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/SAXParser/sec\", method = RequestMethod.POST)\n    public String SAXParserSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXParser xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/Digester/vuln\", method = RequestMethod.POST)\n    public String DigesterVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            Digester digester = new Digester();\n            digester.parse(new StringReader(body));  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"Digester xxe vuln code\";\n    }\n\n    @RequestMapping(value = \"/Digester/sec\", method = RequestMethod.POST)\n    public String DigesterSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            Digester digester = new Digester();\n            digester.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            digester.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            digester.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            digester.parse(new StringReader(body));  // parse xml\n\n            return \"Digester xxe security code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    // 有回显\n    @RequestMapping(value = \"/DocumentBuilder/vuln01\", method = RequestMethod.POST)\n    public String DocumentBuilderVuln01(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            // 遍历xml节点name和value\n            StringBuilder buf = new StringBuilder();\n            NodeList rootNodeList = document.getChildNodes();\n            for (int i = 0; i < rootNodeList.getLength(); i++) {\n                Node rootNode = rootNodeList.item(i);\n                NodeList child = rootNode.getChildNodes();\n                for (int j = 0; j < child.getLength(); j++) {\n                    Node node = child.item(j);\n                    buf.append(String.format(\"%s: %s\\n\", node.getNodeName(), node.getTextContent()));\n                }\n            }\n            sr.close();\n            return buf.toString();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    // 有回显\n    @RequestMapping(value = \"/DocumentBuilder/vuln02\", method = RequestMethod.POST)\n    public String DocumentBuilderVuln02(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            // 遍历xml节点name和value\n            StringBuilder result = new StringBuilder();\n            NodeList rootNodeList = document.getChildNodes();\n            for (int i = 0; i < rootNodeList.getLength(); i++) {\n                Node rootNode = rootNodeList.item(i);\n                NodeList child = rootNode.getChildNodes();\n                for (int j = 0; j < child.getLength(); j++) {\n                    Node node = child.item(j);\n                    // 正常解析XML，需要判断是否是ELEMENT_NODE类型。否则会出现多余的的节点。\n                    if (child.item(j).getNodeType() == Node.ELEMENT_NODE) {\n                        result.append(String.format(\"%s: %s\\n\", node.getNodeName(), node.getFirstChild()));\n                    }\n                }\n            }\n            sr.close();\n            return result.toString();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/Sec\", method = RequestMethod.POST)\n    public String DocumentBuilderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            db.parse(is);  // parse xml\n            sr.close();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"DocumentBuilder xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/xinclude/vuln\", method = RequestMethod.POST)\n    public String DocumentBuilderXincludeVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            dbf.setXIncludeAware(true);   // 支持XInclude\n            dbf.setNamespaceAware(true);  // 支持XInclude\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            NodeList rootNodeList = document.getChildNodes();\n            response(rootNodeList);\n\n            sr.close();\n            return \"DocumentBuilder xinclude xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/xinclude/sec\", method = RequestMethod.POST)\n    public String DocumentBuilderXincludeSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n            dbf.setXIncludeAware(true);   // 支持XInclude\n            dbf.setNamespaceAware(true);  // 支持XInclude\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            NodeList rootNodeList = document.getChildNodes();\n            response(rootNodeList);\n\n            sr.close();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"DocumentBuilder xinclude xxe vuln code\";\n    }\n\n\n    @PostMapping(\"/XMLReader/vuln\")\n    public String XMLReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser saxParser = spf.newSAXParser();\n            XMLReader xmlReader = saxParser.getXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLReader xxe vuln code\";\n    }\n\n\n    @PostMapping(\"/XMLReader/sec\")\n    public String XMLReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser saxParser = spf.newSAXParser();\n            XMLReader xmlReader = saxParser.getXMLReader();\n            xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            xmlReader.parse(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"XMLReader xxe security code\";\n    }\n\n    public static SortingMachine<Map.Pair<String, Integer>> shorten(\n            SortingMachine<Map.Pair<String, Integer>> sortMachine, int num) {\n        assert sortMachine != null : \"Violation of: sortMachine is not null\";\n        assert num <= sortMachine\n                .size() : \"Violation of: N <= size of sortMachine\";\n        // ok: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n        SortingMachine<Map.Pair<String, Integer>> shortenedSM = sortMachine\n                .newInstance();\n        int i = 0;\n\n        //creates a new sortingMachine that only contains the N elements desired\n        //by the user\n        for (Map.Pair<String, Integer> pair : sortMachine) {\n            if (i < num) {\n                shortenedSM.add(pair);\n            }\n            i++;\n        }\n        return shortenedSM;\n    }\n\n    /**\n     * 修复该漏洞只需升级dom4j到2.1.1及以上，该版本及以上禁用了ENTITY；\n     * 不带ENTITY的PoC不能利用，所以禁用ENTITY即可完成修复。\n     */\n    @PostMapping(\"/DocumentHelper/vuln\")\n    public String DocumentHelper(HttpServletRequest req) {\n        try {\n            String body = WebUtils.getRequestBody(req);\n            DocumentHelper.parseText(body); // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"DocumentHelper xxe vuln code\";\n    }\n\n\n    private static void response(NodeList rootNodeList){\n        for (int i = 0; i < rootNodeList.getLength(); i++) {\n            Node rootNode = rootNodeList.item(i);\n            NodeList xxe = rootNode.getChildNodes();\n            for (int j = 0; j < xxe.getLength(); j++) {\n                Node xxeNode = xxe.item(j);\n                // 测试不能blind xxe，所以强行加了一个回显\n                logger.info(\"xxeNode: \" + xxeNode.getNodeValue());\n            }\n\n        }\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}\n", "testsuite_b": "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/vuln\")\n    public String XMLInputFactoryVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    @PostMapping(\"/XMLInputFactory/fix1\")\n    public String XMLInputFactoryFix1(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.supportDTD\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    @PostMapping(\"/XMLInputFactory/fix2\")\n    public String XMLInputFactoryFix2(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    @PostMapping(\"/XMLInputFactory/fix3\")\n    public String XMLInputFactoryFix3(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static SortingMachine<Map.Pair<String, Integer>> shorten(\n            SortingMachine<Map.Pair<String, Integer>> sortMachine, int num) {\n        assert sortMachine != null : \"Violation of: sortMachine is not null\";\n        assert num <= sortMachine\n                .size() : \"Violation of: N <= size of sortMachine\";\n        // ok: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n        SortingMachine<Map.Pair<String, Integer>> shortenedSM = sortMachine\n                .newInstance();\n        int i = 0;\n\n        //creates a new sortingMachine that only contains the N elements desired\n        //by the user\n        for (Map.Pair<String, Integer> pair : sortMachine) {\n            if (i < num) {\n                shortenedSM.add(pair);\n            }\n            i++;\n        }\n        return shortenedSM;\n    }\n\n\n    public static void main(String[] args)  {\n    }\n\n}\n", "ground_truth": "rules:\n  - id: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n    severity: WARNING\n    metadata:\n      cwe: \"CWE-611: Improper Restriction of XML External Entity Reference\"\n      owasp:\n        - A04:2021 - XML External Entities (XXE)\n      references:\n        - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\n      category: security\n      license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n      technology: [java]\n    message:\n      XMLInputFactory being instantiated without calling the setProperty functions\n      that are generally used for disabling entity processing\n    patterns:\n      - pattern-not-inside: |\n          $RETURNTYPE $METHOD(...) {\n            ...\n            $XMLFACTORY.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n            ...\n          }\n      - pattern-not-inside: |\n          $RETURNTYPE $METHOD(...) {\n            ...\n            $XMLFACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n            ...\n          }\n      - pattern-not-inside: |\n          $RETURNTYPE $METHOD(...) {\n            ...\n            $XMLFACTORY.setProperty(\"javax.xml.stream.supportDTD\", false);\n            ...\n          }\n      - pattern-not-inside: |\n          $XMLFACTORY = $W.newInstance(...);\n          ...\n          $XMLFACTORY.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n      - pattern-either:\n          - pattern: $XMLFACTORY = XMLInputFactory.newFactory(...);\n          - pattern: $XMLFACTORY = new XMLInputFactory(...);\n          - pattern: $XMLFACTORY = XMLInputFactory.newInstance(...);\n    languages:\n      - java\n", "rule_path": "extend_dataset/5b4e5660/before/xmlinputfactory.yaml", "test_path": "extend_dataset/5b4e5660/after/xmlinputfactory.java", "category": "historical", "splited_testsuite_b": ["package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/vuln\")\n    public String XMLInputFactoryVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/fix1\")\n    public String XMLInputFactoryFix1(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.supportDTD\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/fix2\")\n    public String XMLInputFactoryFix2(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/fix3\")\n    public String XMLInputFactoryFix3(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    public static SortingMachine<Map.Pair<String, Integer>> shorten(\n            SortingMachine<Map.Pair<String, Integer>> sortMachine, int num) {\n        assert sortMachine != null : \"Violation of: sortMachine is not null\";\n        assert num <= sortMachine\n                .size() : \"Violation of: N <= size of sortMachine\";\n        // ok: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n        SortingMachine<Map.Pair<String, Integer>> shortenedSM = sortMachine\n                .newInstance();\n        int i = 0;\n\n        //creates a new sortingMachine that only contains the N elements desired\n        //by the user\n        for (Map.Pair<String, Integer> pair : sortMachine) {\n            if (i < num) {\n                shortenedSM.add(pair);\n            }\n            i++;\n        }\n        return shortenedSM;\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}"], "actual": [false, false, false, false, false], "expected": [true, false, false, false, false]}
