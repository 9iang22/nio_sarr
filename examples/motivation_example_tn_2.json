{"errors": [], "explanations": [{"children": [{"children": [{"children": [{"children": [{"children": [], "loc": {"end": {"col": 59, "line": 86, "offset": 2503}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 86, "offset": 2474}}, "matches": [], "op": ["XPat", "(HttpServletRequest $REQ)\n"]}, {"children": [{"children": [], "loc": {"end": {"col": 51, "line": 94, "offset": 2778}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 34, "line": 94, "offset": 2761}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 76, "line": 7, "offset": 254}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"SELECT * FROM accounts WHERE id = '%s'\"", "end": {"col": 76, "line": 7, "offset": 254}, "start": {"col": 36, "line": 7, "offset": 214}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 36, "line": 7, "offset": 214}}, {"check_id": "formatted-sql-string", "end": {"col": 55, "line": 10, "offset": 393}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "sql", "end": {"col": 55, "line": 10, "offset": 393}, "start": {"col": 52, "line": 10, "offset": 390}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 52, "line": 10, "offset": 390}}, {"check_id": "formatted-sql-string", "end": {"col": 19, "line": 7, "offset": 197}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "sql", "end": {"col": 19, "line": 7, "offset": 197}, "start": {"col": 16, "line": 7, "offset": 194}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 16, "line": 7, "offset": 194}}, {"check_id": "formatted-sql-string", "end": {"col": 28, "line": 7, "offset": 206}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "String", "end": {"col": 28, "line": 7, "offset": 206}, "start": {"col": 22, "line": 7, "offset": 200}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}, {"check_id": "formatted-sql-string", "end": {"col": 80, "line": 7, "offset": 258}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 80, "line": 7, "offset": 258}, "propagated_value": {"svalue_abstract_content": "\"const\"", "svalue_end": {"col": 28, "line": 6, "offset": 177}, "svalue_start": {"col": 21, "line": 6, "offset": 170}}, "start": {"col": 78, "line": 7, "offset": 256}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 78, "line": 7, "offset": 256}}, {"check_id": "formatted-sql-string", "end": {"col": 28, "line": 6, "offset": 177}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"const\"", "end": {"col": 28, "line": 6, "offset": 177}, "start": {"col": 21, "line": 6, "offset": 170}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 21, "line": 6, "offset": 170}}, {"check_id": "formatted-sql-string", "end": {"col": 18, "line": 6, "offset": 167}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 18, "line": 6, "offset": 167}, "start": {"col": 16, "line": 6, "offset": 165}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 16, "line": 6, "offset": 165}}], "op": ["XPat", "(String $INPUT)"]}, {"children": [{"children": [], "loc": {"end": {"col": 88, "line": 91, "offset": 2682}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 41, "line": 91, "offset": 2635}}, "matches": [], "op": ["XPat", "$ANNOT $FUNC (..., $INPUT, ...) {\n  ...\n}\n"]}], "loc": {"end": {"col": 39, "line": 91, "offset": 2633}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 23, "line": 91, "offset": 2617}}, "matches": [], "op": "Inside"}], "extra": {"before_filter_matches": "None", "before_negation_matches": ["Some", []]}, "loc": {"end": {"col": 29, "line": 89, "offset": 2569}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 19, "line": 89, "offset": 2559}}, "matches": [], "op": "And"}], "loc": {"end": {"col": 31, "line": 84, "offset": 2423}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 84, "offset": 2407}}, "matches": [], "op": "Or"}, {"children": [], "loc": {"end": {"col": 35, "line": 101, "offset": 2918}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 101, "offset": 2898}}, "matches": [], "op": ["Filter", "metavariable-focus"]}], "extra": {"before_filter_matches": ["Some", []], "before_negation_matches": ["Some", []]}, "loc": {"end": {"col": 21, "line": 82, "offset": 2375}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 11, "line": 82, "offset": 2365}}, "matches": [], "op": "And"}, {"children": [{"children": [{"children": [], "loc": {"end": {"col": 43, "line": 111, "offset": 3137}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 111, "offset": 3124}}, "matches": [], "op": ["XPat", "$X + $INPUT"]}, {"children": [], "loc": {"end": {"col": 44, "line": 114, "offset": 3218}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 114, "offset": 3204}}, "matches": [], "op": ["XPat", "$X += $INPUT"]}, {"children": [], "loc": {"end": {"col": 52, "line": 117, "offset": 3307}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 117, "offset": 3285}}, "matches": [], "op": ["XPat", "$STRB.append($INPUT)"]}, {"children": [], "loc": {"end": {"col": 63, "line": 120, "offset": 3407}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 120, "offset": 3374}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 80, "line": 7, "offset": 258}, "propagated_value": {"svalue_abstract_content": "\"const\"", "svalue_end": {"col": 28, "line": 6, "offset": 177}, "svalue_start": {"col": 21, "line": 6, "offset": 170}}, "start": {"col": 78, "line": 7, "offset": 256}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}, {"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"SELECT * FROM accounts WHERE id = '%s'\"", "end": {"col": 76, "line": 7, "offset": 254}, "start": {"col": 36, "line": 7, "offset": 214}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}], "op": ["XPat", "String.format(..., $INPUT, ...)"]}, {"children": [], "loc": {"end": {"col": 61, "line": 123, "offset": 3505}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 123, "offset": 3474}}, "matches": [], "op": ["XPat", "String.join(..., $INPUT, ...)"]}, {"children": [], "loc": {"end": {"col": 60, "line": 126, "offset": 3602}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 126, "offset": 3572}}, "matches": [], "op": ["XPat", "(String $STR).concat($INPUT)"]}, {"children": [], "loc": {"end": {"col": 50, "line": 129, "offset": 3689}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 129, "offset": 3669}}, "matches": [], "op": ["XPat", "$INPUT.concat(...)"]}, {"children": [], "loc": {"end": {"col": 59, "line": 132, "offset": 3785}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 132, "offset": 3756}}, "matches": [], "op": ["XPat", "new $STRB(..., $INPUT, ...)"]}], "loc": {"end": {"col": 31, "line": 109, "offset": 3073}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 109, "offset": 3057}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 80, "line": 7, "offset": 258}, "propagated_value": {"svalue_abstract_content": "\"const\"", "svalue_end": {"col": 28, "line": 6, "offset": 177}, "svalue_start": {"col": 21, "line": 6, "offset": 170}}, "start": {"col": 78, "line": 7, "offset": 256}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}, {"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"SELECT * FROM accounts WHERE id = '%s'\"", "end": {"col": 76, "line": 7, "offset": 254}, "start": {"col": 36, "line": 7, "offset": 214}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}], "op": "Or"}], "extra": {"before_filter_matches": "None", "before_negation_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 80, "line": 7, "offset": 258}, "propagated_value": {"svalue_abstract_content": "\"const\"", "svalue_end": {"col": 28, "line": 6, "offset": 177}, "svalue_start": {"col": 21, "line": 6, "offset": 170}}, "start": {"col": 78, "line": 7, "offset": 256}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}, {"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"SELECT * FROM accounts WHERE id = '%s'\"", "end": {"col": 76, "line": 7, "offset": 254}, "start": {"col": 36, "line": 7, "offset": 214}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}]]}, "loc": {"end": {"col": 21, "line": 107, "offset": 3025}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 11, "line": 107, "offset": 3015}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 80, "line": 7, "offset": 258}, "propagated_value": {"svalue_abstract_content": "\"const\"", "svalue_end": {"col": 28, "line": 6, "offset": 177}, "svalue_start": {"col": 21, "line": 6, "offset": 170}}, "start": {"col": 78, "line": 7, "offset": 256}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}, {"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"SELECT * FROM accounts WHERE id = '%s'\"", "end": {"col": 76, "line": 7, "offset": 254}, "start": {"col": 36, "line": 7, "offset": 214}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}], "op": "And"}], "loc": {"end": {"col": 24, "line": 79, "offset": 2313}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 7, "line": 79, "offset": 2296}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 80, "line": 7, "offset": 258}, "propagated_value": {"svalue_abstract_content": "\"const\"", "svalue_end": {"col": 28, "line": 6, "offset": 177}, "svalue_start": {"col": 21, "line": 6, "offset": 170}}, "start": {"col": 78, "line": 7, "offset": 256}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}, {"check_id": "formatted-sql-string", "end": {"col": 81, "line": 7, "offset": 259}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"SELECT * FROM accounts WHERE id = '%s'\"", "end": {"col": 76, "line": 7, "offset": 254}, "start": {"col": 36, "line": 7, "offset": 214}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 22, "line": 7, "offset": 200}}], "op": "TaintSource"}, {"children": [{"children": [{"children": [{"children": [], "loc": {"end": {"col": 60, "line": 53, "offset": 1505}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 53, "offset": 1475}}, "matches": [], "op": ["XPat", "(Statement $S).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 68, "line": 56, "offset": 1610}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 56, "offset": 1572}}, "matches": [], "op": ["XPat", "(PreparedStatement $P).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 82, "line": 59, "offset": 1729}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 59, "offset": 1677}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}], "op": ["XPat", "(Connection $C).createStatement(...).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 83, "line": 62, "offset": 1849}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 62, "offset": 1796}}, "matches": [], "op": ["XPat", "(Connection $C).prepareStatement(...).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 65, "line": 65, "offset": 1951}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 65, "offset": 1916}}, "matches": [], "op": ["XPat", "(EntityManager $EM).$SQLFUNC(...)"]}], "loc": {"end": {"col": 31, "line": 51, "offset": 1424}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 51, "offset": 1408}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}], "op": "Or"}, {"children": [{"children": [], "loc": {"end": {"col": 73, "line": 45, "offset": 1261}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 45, "offset": 1218}}, "matches": [], "op": ["XPat", "$S.$SQLFUNC(<... \"=~/.*TABLE *$/\" ...>)"]}], "loc": {"end": {"col": 28, "line": 45, "offset": 1216}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 45, "offset": 1203}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}], "op": "Negation"}, {"children": [{"children": [], "loc": {"end": {"col": 74, "line": 48, "offset": 1364}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 48, "offset": 1320}}, "matches": [], "op": ["XPat", "$S.$SQLFUNC(<... \"=~/.*TABLE %s$/\" ...>)"]}], "loc": {"end": {"col": 28, "line": 48, "offset": 1318}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 48, "offset": 1305}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}], "op": "Negation"}, {"children": [], "loc": {"end": {"col": 35, "line": 70, "offset": 2049}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 70, "offset": 2029}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}], "op": ["Filter", "\"metavariable-regex\""]}], "extra": {"before_filter_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}, {"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}]], "before_negation_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}]]}, "loc": {"end": {"col": 21, "line": 43, "offset": 1171}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 11, "line": 43, "offset": 1161}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}, {"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}], "op": "And"}], "loc": {"end": {"col": 22, "line": 41, "offset": 1137}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 7, "line": 41, "offset": 1122}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}, {"check_id": "formatted-sql-string", "end": {"col": 56, "line": 10, "offset": 394}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$C": {"abstract_content": "c", "end": {"col": 25, "line": 10, "offset": 363}, "propagated_value": {"svalue_abstract_content": "db.getConnection()", "svalue_end": {"col": 42, "line": 8, "offset": 302}, "svalue_start": {"col": 24, "line": 8, "offset": 284}}, "start": {"col": 24, "line": 10, "offset": 362}}, "$SQLFUNC": {"abstract_content": "execute", "end": {"col": 51, "line": 10, "offset": 389}, "start": {"col": 44, "line": 10, "offset": 382}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-tn-2.java", "start": {"col": 24, "line": 10, "offset": 362}}], "op": "TaintSink"}, {"children": [{"children": [{"children": [{"children": [], "loc": {"end": {"col": 40, "line": 31, "offset": 959}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 31, "offset": 949}}, "matches": [], "op": ["XPat", "$X == $Y"]}, {"children": [], "loc": {"end": {"col": 40, "line": 34, "offset": 1036}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 30, "line": 34, "offset": 1026}}, "matches": [], "op": ["XPat", "$X != $Y"]}], "loc": {"end": {"col": 31, "line": 29, "offset": 898}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 15, "line": 29, "offset": 882}}, "matches": [], "op": "Or"}, {"children": [], "loc": {"end": {"col": 59, "line": 26, "offset": 838}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 26, "line": 26, "offset": 805}}, "matches": [], "op": ["XPat", "(CriteriaBuilder $CB).$ANY(...)"]}], "extra": {"before_filter_matches": "None", "before_negation_matches": ["Some", []]}, "loc": {"end": {"col": 21, "line": 24, "offset": 762}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 11, "line": 24, "offset": 752}}, "matches": [], "op": "And"}], "loc": {"end": {"col": 27, "line": 22, "offset": 728}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 7, "line": 22, "offset": 708}}, "matches": [], "op": "TaintSanitizer"}], "loc": {"end": {"col": 35, "line": 4, "offset": 55}, "path": "/tmp/tmpdrl8_a8f.json", "start": {"col": 13, "line": 4, "offset": 33}}, "matches": [], "op": "Taint"}], "interfile_languages_used": [], "paths": {"scanned": ["formatted-sql-string-tn-2.java"]}, "results": [], "skipped_rules": [], "version": "1.90.0"}
