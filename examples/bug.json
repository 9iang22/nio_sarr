{
    "id": "detect-non-literal-fs-filename",
    "rule": "rules:\n- id: detect-non-literal-fs-filename\n  patterns:\n  - pattern-not: $FS.$METHOD(\"...\", ...)\n  - pattern-either:\n    - pattern: $FS.appendFile(...)\n    - pattern: $FS.appendFileSync(...)\n    - pattern: $FS.chmod(...)\n    - pattern: $FS.chmodSync(...)\n    - pattern: $FS.chown(...)\n    - pattern: $FS.chownSync(...)\n    - pattern: $FS.createReadStream(...)\n    - pattern: $FS.createWriteStream(...)\n    - pattern: $FS.exists(...)\n    - pattern: $FS.existsSync(...)\n    - pattern: $FS.lchmod(...)\n    - pattern: $FS.lchmodSync(...)\n    - pattern: $FS.lchown(...)\n    - pattern: $FS.lchownSync(...)\n    - pattern: $FS.link(...)\n    - pattern: $FS.linkSync(...)\n    - pattern: $FS.lstat(...)\n    - pattern: $FS.lstatSync(...)\n    - pattern: $FS.mkdir(...)\n    - pattern: $FS.mkdirSync(...)\n    - pattern: $FS.open(...)\n    - pattern: $FS.openSync(...)\n    - pattern: $FS.readdir(...)\n    - pattern: $FS.readdirSync(...)\n    - pattern: $FS.readFile(...)\n    - pattern: $FS.readFileSync(...)\n    - pattern: $FS.readlink(...)\n    - pattern: $FS.readlinkSync(...)\n    - pattern: $FS.realpath(...)\n    - pattern: $FS.realpathSync(...)\n    - pattern: $FS.rename(...)\n    - pattern: $FS.renameSync(...)\n    - pattern: $FS.rmdir(...)\n    - pattern: $FS.rmdirSync(...)\n    - pattern: $FS.stat(...)\n    - pattern: $FS.statSync(...)\n    - pattern: $FS.symlink(...)\n    - pattern: $FS.symlinkSync(...)\n    - pattern: $FS.truncate(...)\n    - pattern: $FS.truncateSync(...)\n    - pattern: $FS.unlink(...)\n    - pattern: $FS.unlinkSync(...)\n    - pattern: $FS.unwatchFile(...)\n    - pattern: $FS.utimes(...)\n    - pattern: $FS.utimesSync(...)\n    - pattern: $FS.watch(...)\n    - pattern: $FS.watchFile(...)\n    - pattern: $FS.writeFile(...)\n    - pattern: $FS.writeFileSync(...)\n  message: >-\n    A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n  languages:\n  - typescript\n  - javascript\n  severity: WARNING\n  metadata:\n    cwe: \"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"\n    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-fs-filename.js\n    category: security\n",
    "failed_tests": "  \n  async function okTest3() {\n    let filehandle;\n    try {\n      // ok:detect-non-literal-fs-filename\n      filehandle = await this.open();\n    } finally {\n      if (filehandle !== undefined)\n        await filehandle.close();\n    }\n  }\n\n",
    "failed_type": "fp",
    "testsuite_a": "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test1(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  readFile(fileName)\n    .then((resolve, reject) => {\n      foobar()\n    })\n}\n\nasync function test2(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  const data = await fs.promises.mkdir(fileName, {})\n  foobar(data)\n}\n\nfunction test3(fileName) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ruleid:detect-non-literal-fs-filename\n  fs.writeFile(fileName, data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nfunction okTest1(data) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ok:detect-non-literal-fs-filename\n  fs.writeFile('message.txt', data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nasync function okTest2() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await fs.promises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n",
    "testsuite_b": "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test1(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  readFile(fileName)\n    .then((resolve, reject) => {\n      foobar()\n    })\n}\n\nasync function test2(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  const data = await fs.promises.mkdir(fileName, {})\n  foobar(data)\n}\n\nfunction test3(fileName) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ruleid:detect-non-literal-fs-filename\n  fs.writeFile(fileName, data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nfunction okTest1(data) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ok:detect-non-literal-fs-filename\n  fs.writeFile('message.txt', data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nasync function okTest2() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await fs.promises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n\nasync function okTest3() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await this.open();\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n",
    "ground_truth": "rules:\n- id: detect-non-literal-fs-filename\n  patterns:\n  - pattern-inside: |\n      $X = require('fs')\n      ...\n  - pattern-not: $FS.$METHOD(\"...\", ...)\n  - pattern-either:\n    - pattern: $FS.appendFile($FILE,...)\n    - pattern: $FS.appendFileSync($FILE,...)\n    - pattern: $FS.chmod($FILE,...)\n    - pattern: $FS.chmodSync($FILE,...)\n    - pattern: $FS.chown($FILE,...)\n    - pattern: $FS.chownSync($FILE,...)\n    - pattern: $FS.createReadStream($FILE,...)\n    - pattern: $FS.createWriteStream($FILE,...)\n    - pattern: $FS.exists($FILE,...)\n    - pattern: $FS.existsSync($FILE,...)\n    - pattern: $FS.lchmod($FILE,...)\n    - pattern: $FS.lchmodSync($FILE,...)\n    - pattern: $FS.lchown($FILE,...)\n    - pattern: $FS.lchownSync($FILE,...)\n    - pattern: $FS.link($FILE,...)\n    - pattern: $FS.linkSync($FILE,...)\n    - pattern: $FS.lstat($FILE,...)\n    - pattern: $FS.lstatSync($FILE,...)\n    - pattern: $FS.mkdir($FILE,...)\n    - pattern: $FS.mkdirSync($FILE,...)\n    - pattern: $FS.open($FILE,...)\n    - pattern: $FS.openSync($FILE,...)\n    - pattern: $FS.readdir($FILE,...)\n    - pattern: $FS.readdirSync($FILE,...)\n    - pattern: $FS.readFile($FILE,...)\n    - pattern: $FS.readFileSync($FILE,...)\n    - pattern: $FS.readlink($FILE,...)\n    - pattern: $FS.readlinkSync($FILE,...)\n    - pattern: $FS.realpath($FILE,...)\n    - pattern: $FS.realpathSync($FILE,...)\n    - pattern: $FS.rename($FILE,...)\n    - pattern: $FS.renameSync($FILE,...)\n    - pattern: $FS.rmdir($FILE,...)\n    - pattern: $FS.rmdirSync($FILE,...)\n    - pattern: $FS.stat($FILE,...)\n    - pattern: $FS.statSync($FILE,...)\n    - pattern: $FS.symlink($FILE,...)\n    - pattern: $FS.symlinkSync($FILE,...)\n    - pattern: $FS.truncate($FILE,...)\n    - pattern: $FS.truncateSync($FILE,...)\n    - pattern: $FS.unlink($FILE,...)\n    - pattern: $FS.unlinkSync($FILE,...)\n    - pattern: $FS.unwatchFile($FILE,...)\n    - pattern: $FS.utimes($FILE,...)\n    - pattern: $FS.utimesSync($FILE,...)\n    - pattern: $FS.watch($FILE,...)\n    - pattern: $FS.watchFile($FILE,...)\n    - pattern: $FS.writeFile($FILE,...)\n    - pattern: $FS.writeFileSync($FILE,...)\n  message: >-\n    A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n  languages:\n  - typescript\n  - javascript\n  severity: WARNING\n  metadata:\n    cwe: \"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"\n    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-fs-filename.js\n    category: security\n",
    "rule_path": "extend_dataset/0a151eef/before/detect-non-literal-fs-filename.yaml",
    "test_path": "extend_dataset/0a151eef/after/detect-non-literal-fs-filename.js",
    "category": "historical",
    "splited_testsuite_b": [
        "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test1(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  readFile(fileName)\n    .then((resolve, reject) => {\n      foobar()\n    })\n}",
        "const {readFile} = require('fs')\nconst fs = require('fs')\n\nasync function test2(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  const data = await fs.promises.mkdir(fileName, {})\n  foobar(data)\n}",
        "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test3(fileName) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ruleid:detect-non-literal-fs-filename\n  fs.writeFile(fileName, data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}",
        "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction okTest1(data) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ok:detect-non-literal-fs-filename\n  fs.writeFile('message.txt', data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}",
        "const {readFile} = require('fs')\nconst fs = require('fs')\n\nasync function okTest2() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await fs.promises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}",
        "const {readFile} = require('fs')\nconst fs = require('fs')\n\nasync function okTest3() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await this.open();\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}"
    ]
}
