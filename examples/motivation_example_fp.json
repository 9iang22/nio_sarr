{"errors": [], "explanations": [{"children": [{"children": [{"children": [{"children": [{"children": [], "loc": {"end": {"col": 59, "line": 86, "offset": 2503}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 86, "offset": 2474}}, "matches": [], "op": ["XPat", "(HttpServletRequest $REQ)\n"]}, {"children": [{"children": [], "loc": {"end": {"col": 51, "line": 94, "offset": 2778}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 34, "line": 94, "offset": 2761}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 52, "line": 8, "offset": 384}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "jql_", "end": {"col": 52, "line": 8, "offset": 384}, "propagated_value": {"svalue_abstract_content": "StringEscapeUtils.escapeSql(jql)", "svalue_end": {"col": 55, "line": 5, "offset": 232}, "svalue_start": {"col": 23, "line": 5, "offset": 200}}, "start": {"col": 48, "line": 8, "offset": 380}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 48, "line": 8, "offset": 380}}, {"check_id": "formatted-sql-string", "end": {"col": 54, "line": 5, "offset": 231}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "jql", "end": {"col": 54, "line": 5, "offset": 231}, "propagated_value": {"svalue_abstract_content": "String.format(\"from Account where id = '%s'\"id)", "svalue_end": {"col": 71, "line": 4, "offset": 176}, "svalue_start": {"col": 22, "line": 4, "offset": 127}}, "start": {"col": 51, "line": 5, "offset": 228}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 51, "line": 5, "offset": 228}}, {"check_id": "formatted-sql-string", "end": {"col": 20, "line": 5, "offset": 197}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "jql_", "end": {"col": 20, "line": 5, "offset": 197}, "start": {"col": 16, "line": 5, "offset": 193}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 16, "line": 5, "offset": 193}}, {"check_id": "formatted-sql-string", "end": {"col": 66, "line": 4, "offset": 171}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"from Account where id = '%s'\"", "end": {"col": 66, "line": 4, "offset": 171}, "start": {"col": 36, "line": 4, "offset": 141}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 36, "line": 4, "offset": 141}}, {"check_id": "formatted-sql-string", "end": {"col": 19, "line": 4, "offset": 124}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "jql", "end": {"col": 19, "line": 4, "offset": 124}, "start": {"col": 16, "line": 4, "offset": 121}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 16, "line": 4, "offset": 121}}, {"check_id": "formatted-sql-string", "end": {"col": 28, "line": 4, "offset": 133}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "String", "end": {"col": 28, "line": 4, "offset": 133}, "start": {"col": 22, "line": 4, "offset": 127}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}, {"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}], "op": ["XPat", "(String $INPUT)"]}, {"children": [{"children": [], "loc": {"end": {"col": 88, "line": 91, "offset": 2682}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 41, "line": 91, "offset": 2635}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 6, "line": 13, "offset": 530}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "cb", "end": {"col": 75, "line": 3, "offset": 102}, "start": {"col": 73, "line": 3, "offset": 100}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 5, "line": 3, "offset": 32}}, {"check_id": "formatted-sql-string", "end": {"col": 6, "line": 13, "offset": 530}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 55, "line": 3, "offset": 82}, "start": {"col": 53, "line": 3, "offset": 80}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 5, "line": 3, "offset": 32}}], "op": ["XPat", "$ANNOT $FUNC (..., $INPUT, ...) {\n  ...\n}\n"]}], "loc": {"end": {"col": 39, "line": 91, "offset": 2633}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 23, "line": 91, "offset": 2617}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 6, "line": 13, "offset": 530}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "cb", "end": {"col": 75, "line": 3, "offset": 102}, "start": {"col": 73, "line": 3, "offset": 100}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 5, "line": 3, "offset": 32}}, {"check_id": "formatted-sql-string", "end": {"col": 6, "line": 13, "offset": 530}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 55, "line": 3, "offset": 82}, "start": {"col": 53, "line": 3, "offset": 80}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 5, "line": 3, "offset": 32}}], "op": "Inside"}], "extra": {"before_filter_matches": "None", "before_negation_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}]]}, "loc": {"end": {"col": 29, "line": 89, "offset": 2569}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 19, "line": 89, "offset": 2559}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}], "op": "And"}], "loc": {"end": {"col": 31, "line": 84, "offset": 2423}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 84, "offset": 2407}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}], "op": "Or"}, {"children": [], "loc": {"end": {"col": 35, "line": 101, "offset": 2918}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 101, "offset": 2898}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}], "op": ["Filter", "metavariable-focus"]}], "extra": {"before_filter_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}]], "before_negation_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}]]}, "loc": {"end": {"col": 21, "line": 82, "offset": 2375}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 11, "line": 82, "offset": 2365}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}], "op": "And"}, {"children": [{"children": [{"children": [], "loc": {"end": {"col": 43, "line": 111, "offset": 3137}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 111, "offset": 3124}}, "matches": [], "op": ["XPat", "$X + $INPUT"]}, {"children": [], "loc": {"end": {"col": 44, "line": 114, "offset": 3218}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 114, "offset": 3204}}, "matches": [], "op": ["XPat", "$X += $INPUT"]}, {"children": [], "loc": {"end": {"col": 52, "line": 117, "offset": 3307}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 117, "offset": 3285}}, "matches": [], "op": ["XPat", "$STRB.append($INPUT)"]}, {"children": [], "loc": {"end": {"col": 63, "line": 120, "offset": 3407}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 120, "offset": 3374}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}, {"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"from Account where id = '%s'\"", "end": {"col": 66, "line": 4, "offset": 171}, "start": {"col": 36, "line": 4, "offset": 141}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}], "op": ["XPat", "String.format(..., $INPUT, ...)"]}, {"children": [], "loc": {"end": {"col": 61, "line": 123, "offset": 3505}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 123, "offset": 3474}}, "matches": [], "op": ["XPat", "String.join(..., $INPUT, ...)"]}, {"children": [], "loc": {"end": {"col": 60, "line": 126, "offset": 3602}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 126, "offset": 3572}}, "matches": [], "op": ["XPat", "(String $STR).concat($INPUT)"]}, {"children": [], "loc": {"end": {"col": 50, "line": 129, "offset": 3689}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 129, "offset": 3669}}, "matches": [], "op": ["XPat", "$INPUT.concat(...)"]}, {"children": [], "loc": {"end": {"col": 59, "line": 132, "offset": 3785}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 132, "offset": 3756}}, "matches": [], "op": ["XPat", "new $STRB(..., $INPUT, ...)"]}], "loc": {"end": {"col": 31, "line": 109, "offset": 3073}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 109, "offset": 3057}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}, {"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"from Account where id = '%s'\"", "end": {"col": 66, "line": 4, "offset": 171}, "start": {"col": 36, "line": 4, "offset": 141}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}], "op": "Or"}], "extra": {"before_filter_matches": "None", "before_negation_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}, {"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"from Account where id = '%s'\"", "end": {"col": 66, "line": 4, "offset": 171}, "start": {"col": 36, "line": 4, "offset": 141}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}]]}, "loc": {"end": {"col": 21, "line": 107, "offset": 3025}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 11, "line": 107, "offset": 3015}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}, {"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"from Account where id = '%s'\"", "end": {"col": 66, "line": 4, "offset": 171}, "start": {"col": 36, "line": 4, "offset": 141}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}], "op": "And"}], "loc": {"end": {"col": 24, "line": 79, "offset": 2313}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 7, "line": 79, "offset": 2296}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 70, "line": 4, "offset": 175}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}, {"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "id", "end": {"col": 70, "line": 4, "offset": 175}, "start": {"col": 68, "line": 4, "offset": 173}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}, {"check_id": "formatted-sql-string", "end": {"col": 71, "line": 4, "offset": 176}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$INPUT": {"abstract_content": "\"from Account where id = '%s'\"", "end": {"col": 66, "line": 4, "offset": 171}, "start": {"col": 36, "line": 4, "offset": 141}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 22, "line": 4, "offset": 127}}], "op": "TaintSource"}, {"children": [{"children": [{"children": [{"children": [], "loc": {"end": {"col": 60, "line": 53, "offset": 1505}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 53, "offset": 1475}}, "matches": [], "op": ["XPat", "(Statement $S).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 68, "line": 56, "offset": 1610}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 56, "offset": 1572}}, "matches": [], "op": ["XPat", "(PreparedStatement $P).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 82, "line": 59, "offset": 1729}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 59, "offset": 1677}}, "matches": [], "op": ["XPat", "(Connection $C).createStatement(...).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 83, "line": 62, "offset": 1849}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 62, "offset": 1796}}, "matches": [], "op": ["XPat", "(Connection $C).prepareStatement(...).$SQLFUNC(...)"]}, {"children": [], "loc": {"end": {"col": 65, "line": 65, "offset": 1951}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 65, "offset": 1916}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": ["XPat", "(EntityManager $EM).$SQLFUNC(...)"]}], "loc": {"end": {"col": 31, "line": 51, "offset": 1424}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 51, "offset": 1408}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": "Or"}, {"children": [{"children": [], "loc": {"end": {"col": 73, "line": 45, "offset": 1261}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 45, "offset": 1218}}, "matches": [], "op": ["XPat", "$S.$SQLFUNC(<... \"=~/.*TABLE *$/\" ...>)"]}], "loc": {"end": {"col": 28, "line": 45, "offset": 1216}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 45, "offset": 1203}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": "Negation"}, {"children": [{"children": [], "loc": {"end": {"col": 74, "line": 48, "offset": 1364}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 48, "offset": 1320}}, "matches": [], "op": ["XPat", "$S.$SQLFUNC(<... \"=~/.*TABLE %s$/\" ...>)"]}], "loc": {"end": {"col": 28, "line": 48, "offset": 1318}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 48, "offset": 1305}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": "Negation"}, {"children": [], "loc": {"end": {"col": 35, "line": 70, "offset": 2049}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 70, "offset": 2029}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": ["Filter", "\"metavariable-regex\""]}], "extra": {"before_filter_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}, {"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}]], "before_negation_matches": ["Some", [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}]]}, "loc": {"end": {"col": 21, "line": 43, "offset": 1171}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 11, "line": 43, "offset": 1161}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}, {"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": "And"}], "loc": {"end": {"col": 22, "line": 41, "offset": 1137}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 7, "line": 41, "offset": 1122}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}, {"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": "TaintSink"}, {"children": [{"children": [{"children": [{"children": [], "loc": {"end": {"col": 40, "line": 31, "offset": 959}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 31, "offset": 949}}, "matches": [], "op": ["XPat", "$X == $Y"]}, {"children": [], "loc": {"end": {"col": 40, "line": 34, "offset": 1036}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 30, "line": 34, "offset": 1026}}, "matches": [], "op": ["XPat", "$X != $Y"]}], "loc": {"end": {"col": 31, "line": 29, "offset": 898}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 15, "line": 29, "offset": 882}}, "matches": [], "op": "Or"}, {"children": [], "loc": {"end": {"col": 59, "line": 26, "offset": 838}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 26, "line": 26, "offset": 805}}, "matches": [], "op": ["XPat", "(CriteriaBuilder $CB).$ANY(...)"]}], "extra": {"before_filter_matches": "None", "before_negation_matches": ["Some", []]}, "loc": {"end": {"col": 21, "line": 24, "offset": 762}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 11, "line": 24, "offset": 752}}, "matches": [], "op": "And"}], "loc": {"end": {"col": 27, "line": 22, "offset": 728}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 7, "line": 22, "offset": 708}}, "matches": [], "op": "TaintSanitizer"}], "loc": {"end": {"col": 35, "line": 4, "offset": 55}, "path": "/tmp/tmp2pulxovy.json", "start": {"col": 13, "line": 4, "offset": 33}}, "matches": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "jql", "location": {"end": {"col": 19, "line": 4, "offset": 124}, "path": "formatted-sql-string-fp.java", "start": {"col": 16, "line": 4, "offset": 121}}}, {"content": "jql_", "location": {"end": {"col": 20, "line": 5, "offset": 197}, "path": "formatted-sql-string-fp.java", "start": {"col": 16, "line": 5, "offset": 193}}}], "taint_sink": ["CliLoc", [{"end": {"col": 68, "line": 8, "offset": 400}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}, "em.createQuery(jql_, Account.class)"]], "taint_source": ["CliLoc", [{"end": {"col": 70, "line": 4, "offset": 175}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}, "id"]]}, "engine_kind": "OSS", "is_ignored": false, "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "op": "Taint"}], "interfile_languages_used": [], "paths": {"scanned": ["formatted-sql-string-fp.java"]}, "results": [{"check_id": "formatted-sql-string", "end": {"col": 68, "line": 8, "offset": 400}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "jql", "location": {"end": {"col": 19, "line": 4, "offset": 124}, "path": "formatted-sql-string-fp.java", "start": {"col": 16, "line": 4, "offset": 121}}}, {"content": "jql_", "location": {"end": {"col": 20, "line": 5, "offset": 197}, "path": "formatted-sql-string-fp.java", "start": {"col": 16, "line": 5, "offset": 193}}}], "taint_sink": ["CliLoc", [{"end": {"col": 68, "line": 8, "offset": 400}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}, "em.createQuery(jql_, Account.class)"]], "taint_source": ["CliLoc", [{"end": {"col": 70, "line": 4, "offset": 175}, "path": "formatted-sql-string-fp.java", "start": {"col": 68, "line": 4, "offset": 173}}, "id"]]}, "engine_kind": "OSS", "fingerprint": "3223392821e90339d14dc46ba05aeda207c6bfc7dcbc1671422c0fdf7ce425d2e8907095103a7d872beb978e58104f34098db425d9468906ee70f1869c8ae1af_0", "is_ignored": false, "lines": "        TypedQuery<Account> q = em.createQuery(jql_, Account.class);", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metadata": {}, "metavars": {"$ANNOT": {"abstract_content": "List<AccountDTO>", "end": {"col": 28, "line": 3, "offset": 55}, "start": {"col": 12, "line": 3, "offset": 39}}, "$EM": {"abstract_content": "em", "end": {"col": 35, "line": 8, "offset": 367}, "propagated_value": {"svalue_abstract_content": "emfactory.createEntityManager()", "svalue_end": {"col": 59, "line": 6, "offset": 291}, "svalue_start": {"col": 28, "line": 6, "offset": 260}}, "start": {"col": 33, "line": 8, "offset": 365}}, "$FUNC": {"abstract_content": "findAccountsById", "end": {"col": 45, "line": 3, "offset": 72}, "start": {"col": 29, "line": 3, "offset": 56}}, "$SQLFUNC": {"abstract_content": "createQuery", "end": {"col": 47, "line": 8, "offset": 379}, "start": {"col": 36, "line": 8, "offset": 368}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "formatted-sql-string-fp.java", "start": {"col": 33, "line": 8, "offset": 365}}], "skipped_rules": [], "version": "1.90.0"}
